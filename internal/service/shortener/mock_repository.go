// Code generated by mockery v2.18.0. DO NOT EDIT.

package shortener

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetWithCode provides a mock function with given fields: code
func (_m *MockRepository) GetWithCode(code string) (*ShortURL, error) {
	ret := _m.Called(code)

	var r0 *ShortURL
	if rf, ok := ret.Get(0).(func(string) *ShortURL); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShortURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithHashURL provides a mock function with given fields: hashURL
func (_m *MockRepository) GetWithHashURL(hashURL string) (*ShortURL, error) {
	ret := _m.Called(hashURL)

	var r0 *ShortURL
	if rf, ok := ret.Get(0).(func(string) *ShortURL); ok {
		r0 = rf(hashURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShortURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hashURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: shortURL
func (_m *MockRepository) Put(shortURL *ShortURL) error {
	ret := _m.Called(shortURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ShortURL) error); ok {
		r0 = rf(shortURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
